generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id          Int                  @id @default(autoincrement())
  name             String?
  email            String               @unique
  meals            Meal[]
  mealPreferences  UserMealPreference[]
  macroPreferences UserPreference[]
}

model Kitchen {
  id          String        @id
  name        String        @unique
  description String?
  foods       KitchenFood[]
}

model Food {
  id           String        @id
  name         String
  description  String?
  active       Boolean
  updated      DateTime      @default(now()) @updatedAt
  brand        String
  macros       FoodMacro[]
  foodServings FoodServing[]
  kitchens     KitchenFood[]
  servingUnits ServingUnit[]
}

model FoodMacro {
  id        Int               @id @default(autoincrement())
  food_id   String
  metric_id String
  value     Float
  food      Food              @relation(fields: [food_id], references: [id])
  metric    NutritionalMetric @relation(fields: [metric_id], references: [id])

  @@unique([food_id, metric_id])
}

model NutritionalMetric {
  id             String           @id
  name           String           @unique
  unit           String
  description    String?
  foodMacros     FoodMacro[]
  mealMacroGoals MealMacroGoal[]
  preferences    UserPreference[]
}

model UserPreference {
  id        Int               @id @default(autoincrement())
  user_id   Int
  metric_id String
  min_value Float?
  max_value Float?
  metric    NutritionalMetric @relation(fields: [metric_id], references: [id])
  user      User              @relation(fields: [user_id], references: [user_id])

  @@unique([user_id, metric_id])
}

model FoodServing {
  id       String      @id
  food_id  String
  meal_id  String
  quantity Float
  unit_id  String
  food     Food        @relation(fields: [food_id], references: [id])
  meal     Meal        @relation(fields: [meal_id], references: [id])
  unit     ServingUnit @relation(fields: [unit_id], references: [id])
}

model Meal {
  id       String        @id
  name     String
  date     DateTime      @db.Date
  user_id  Int
  time     String
  servings FoodServing[]
  user     User          @relation(fields: [user_id], references: [user_id])

  @@unique([user_id, date, time])
  @@unique([user_id, date, name])
}

model ServingUnit {
  id       String        @id
  name     String
  grams    Float
  food_id  String
  servings FoodServing[]
  food     Food          @relation(fields: [food_id], references: [id])

  @@unique([name, food_id])
}

model UserMealPreference {
  id                      String          @id @default(cuid())
  user_id                 Int
  name                    String
  default_time            String
  distribution_percentage Float?
  macroGoals              MealMacroGoal[]
  user                    User            @relation(fields: [user_id], references: [user_id])
}

model MealMacroGoal {
  id                      String             @id @default(cuid())
  user_meal_preference_id String
  metric_id               String
  target_percentage       Float
  metric                  NutritionalMetric  @relation(fields: [metric_id], references: [id])
  userMealPreference      UserMealPreference @relation(fields: [user_meal_preference_id], references: [id], onDelete: Cascade)

  @@unique([user_meal_preference_id, metric_id])
}

model KitchenFood {
  id         String  @id
  kitchen_id String
  food_id    String
  active     Boolean @default(false)
  food       Food    @relation(fields: [food_id], references: [id], onDelete: Cascade)
  kitchen    Kitchen @relation(fields: [kitchen_id], references: [id], onDelete: Cascade)

  @@unique([kitchen_id, food_id])
}
