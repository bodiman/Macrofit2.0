generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id          Int              @id @default(autoincrement())
  name             String?
  email            String           @unique
  macroPreferences UserPreference[]
  meals            Meal[]
  mealPreferences  UserMealPreference[]
}

model Kitchen {
  id          String  @id
  name        String  @unique
  description String?
  foods       Food[]
}

model Food {
  id                String          @id
  name              String
  description       String?
  active            Boolean
  updated           DateTime        @default(now()) @updatedAt
  kitchens          Kitchen[]
  servingUnits      ServingUnit[]
  macros            FoodMacro[]
  foodServings      FoodServing[]
}

model FoodMacro {
  id        Int               @id @default(autoincrement())
  food_id   String
  metric_id String
  value     Float
  food      Food              @relation(fields: [food_id], references: [id])
  metric    NutritionalMetric @relation(fields: [metric_id], references: [id])

  @@unique([food_id, metric_id])
}

model NutritionalMetric {
  id          String           @id
  name        String           @unique
  description String?
  unit        String
  foodMacros  FoodMacro[]
  preferences UserPreference[]
  mealMacroGoals MealMacroGoal[]
}

model UserPreference {
  id        Int               @id @default(autoincrement())
  user_id   Int
  metric_id String
  min_value Float?
  max_value Float?
  metric    NutritionalMetric @relation(fields: [metric_id], references: [id])
  user      User              @relation(fields: [user_id], references: [user_id])

  @@unique([user_id, metric_id])
}

model FoodServing {
  id          String        @id
  food_id     String
  meal_id     String
  unit_id     String
  quantity    Float
  unit        ServingUnit   @relation(fields: [unit_id], references: [id]) 
  food        Food          @relation(fields: [food_id], references: [id])
  meal        Meal          @relation(fields: [meal_id], references: [id])
}

model Meal {
  id        String        @id
  name      String
  date      DateTime      @db.Date
  time      String
  user_id   Int
  user      User          @relation(fields: [user_id], references: [user_id])
  servings  FoodServing[]

  @@unique([user_id, date, time])
  @@unique([user_id, date, name])
}

model ServingUnit {
  id        String    @id
  name      String
  grams     Float
  food_id   String
  food      Food      @relation(fields: [food_id], references: [id])
  servings  FoodServing[]

  @@unique([name, food_id])
}

model UserMealPreference {
  id            String @id @default(cuid())
  user_id       Int
  name          String
  default_time  String
  distribution_percentage Float?

  user       User            @relation(fields: [user_id], references: [user_id])
  macroGoals MealMacroGoal[]
}

model MealMacroGoal {
  id                        String   @id @default(cuid())
  user_meal_preference_id   String   // Foreign key to UserMealPreference
  metric_id                 String   // Foreign key to NutritionalMetric (e.g., "Calories", "Protein", "Carbs", "Fat")
  target_percentage         Float    // The target percentage for this metric *within this meal preference* (e.g., 0.3 for 30%)

  userMealPreference UserMealPreference @relation(fields: [user_meal_preference_id], references: [id], onDelete: Cascade)
  metric             NutritionalMetric  @relation(fields: [metric_id], references: [id])

  @@unique([user_meal_preference_id, metric_id]) // Ensures only one percentage per metric per meal preference
}
