// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String           @id @default(uuid())
  email       String           @unique
  password    String
  name        String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  meals       Meal[]
  preferences UserPreferences?
}

model UserPreferences {
  id               String   @id @default(uuid())
  userId           String   @unique
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  macroPreferences Json
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Meal {
  id        String        @id @default(uuid())
  name      String
  userId    String
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  foods     FoodServing[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Food {
  id          String        @id @default(uuid())
  name        String
  brand       String?
  description String?
  servings    FoodServing[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model FoodServing {
  id        String   @id @default(uuid())
  foodId    String
  food      Food     @relation(fields: [foodId], references: [id], onDelete: Cascade)
  mealId    String
  meal      Meal     @relation(fields: [mealId], references: [id], onDelete: Cascade)
  quantity  Float
  unit      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
